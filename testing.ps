%!
/want_failure? true def
/want_failure? false def

/x         {currentpoint      pop} def
/y         {currentpoint exch pop} def
/moveup    {0 exch       rmoveto}  def
/movedown  {0 exch   neg rmoveto}  def
/moveleft  {  neg  0     rmoveto}  def
/moveright {       0     rmoveto}  def
/movexto   {       y     moveto}   def
/moveyto   {x exch       moveto}   def

/append_str {
  /str_2 exch def
  /str_1 exch def
  /str_3 str_1 length str_2 length add string def
  str_1 str_3 copy pop
  str_3 str_1 length str_2 putinterval
  str_3
} def

/to_str {
  100 string cvs
} def

% Create the assertions array unless it exists.
%
% - -- -
%
% Side Effects:
%   Creates an assertion array.
%   Creates an assertion counter.
%   Creates a failure counter.
/setup_tests {
  /assertions_arr where {
    pop % The array exists. Discard the unused location.
  } {
    /assertions_arr 100 array def % Create an array.
    /assertions 0 def % Create an assertions counter.
    /failures 0 def % Create a failure counter.
    /failure_messages 100 array def % Create a failure counter.
  } ifelse
} def

% Assert that the given procedure is true.
%
% proc str -- -
/assert {
  setup_tests
  exch                % -- str proc
  2 array astore      % -- [str proc]
  assertions_arr exch % -- array [str proc]
  assertions exch     % -- array index [str proc]
  put
  /assertions assertions 1 add def % assertions++
} def

% Assert the procedure and following element to be true.
%
/assert_equal {
  setup_tests
  /expected exch def
  /actual   exch def

  /test_case {actual expected eq} def
  test_case

  (expected: )
  expected to_str append_str
  ( actual: )     append_str
  actual to_str   append_str
  assert
} def

% Runs all the tests.
%
% - -- bool
%
% Side Effects:
%   Sets font.
%   Changes cursor position.
%   Increments failures if necessary.
%   And prints on the page if there is a failure.
%
% Returns a boolean of whether all the tests passed.
/all_tests_passed? {
  setup_tests

  0 1 assertions 1 sub {
    assertions_arr exch get
    aload pop  % Push test array elements back onto stack.
    exec not { % Do, if the test is not true.
      dup length 0 eq {
        pop
        (No message given.)
      } if
      failure_messages exch failures exch
      put
      /failures failures 1 add def
    } {
      pop % Discard the unused message.
    } ifelse
  } for
  failures 0 eq % See if the failures were every incremented
} def

/display_errors {
  /test_fontsize 20 def
  /Courier findfont test_fontsize scalefont setfont
  0 11 72 mul 32 sub moveto

  0 1 failures 1 sub {
    test_fontsize movedown
    32 movexto
    failure_messages exch get show
  } for
  showpage
} def

{(Luke) ( ) append_str (Fritz) append_str} (Luke Fritz) assert_equal
{1 1 add} 2 assert_equal
{2 2 add 4 eq} (2+2=4) assert
{10 to_str} (10) assert_equal
{/test_name to_str} (test_name) assert_equal
want_failure? { {false} () assert } if

all_tests_passed? { % Do, if all the tests passed.
  /Courier findfont 12 scalefont setfont
  32 11 72 mul 32 sub 12 sub moveto
  (All tests passed.) show
  showpage
} {
  /Courier findfont 12 scalefont setfont
  32 11 72 mul 32 sub 12 sub moveto
  (Some tests failed.) show
  showpage
  display_errors
} ifelse

